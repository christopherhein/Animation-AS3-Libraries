/* ------------------------------- *//* 	Particle System Class	* version: 0.1	* Author: Christopher Hein	* http://www.christopherhein.com	* email: me@christopherhein.com	This Class file controls objects in a 3D space	using Z space and random generators to continuously 	move the objects around.		****** TO USE ******	new Space( [ objects ], depth:Number, clickable = ( true/false ), baseColor, stageWidth, stageHeight );*//* ------------------------------- */package christopherhein{		import flash.display.*;	import flash.events.*;	import flash.text.*;	import com.webdevils.*;	import caurina.transitions.*;	import caurina.transitions.properties.*;		public class ParticleAddSystem	{			// Private Variables		private var _array:Array;		private var _objectsMaking:uint;		private var _depth:Number;		private var t:Number = 7;		private var del:Number = 0;		private var size:Number = 1;		private var trans:String = "easeOut";		private var i:Number;		private var _clickable:Boolean;		private var _baseColor:uint;		private var _hostMC:MovieClip;		private var _centerWide:Number;		private var _centerHigh:Number;				public function ParticleAddSystem( h:MovieClip, a:Array, d:Number, c:Boolean, bC:uint, sW:Number, sH:Number )		{			FilterShortcuts.init();			ColorShortcuts.init();				// Declaring Values for the private variables 			_array = new Array();			_depth = d;			_clickable = c;			_baseColor = bC;			_hostMC = h;			_centerWide = ( sW * .5 );			_centerHigh = ( sH * .5 );			_objectsMaking = _array.length;						_hostMC.x = _centerWide;			_hostMC.y = _centerHigh;							// Turn all the items in the array to a MovieClip			for ( var p in a )			{				_array.push( new a[p]() );			}							// Setting the Items clickable			if( c == true )			{				ButtonEnabled( _array );			} else 			{				ButtonUnabled( _array );							}							// First Function			startPlay( _array );					} // --- End of the Constructor Function				// --- Private Functions		private function startPlay( _array ):void 		{			for ( var p in _array ) 			{				_array[p].x = p * 30;				_array[p].y = p  * 10;				_hostMC.addChild( _array[p] );									// Variables				var xPos:Number = Math.random() * ( _depth * -2 );				var yPos:Number = Math.random() * ( _depth * 1 );				var zPos:Number = Math.random() * ( _depth * 1 );				var blur:Number = ( (( zPos * 2 ) *.5) * .01 );				var size:Number = ( blur * .2 );				var time:Number = Math.random() * ( t * 5 );				var delay:Number = Math.random() * ( del );									// First Tween				Tweener.addTween( _array[p],								 {									 time: time,									 delay: del,									 scaleX: size,									 scaleY: size,									 x: xPos,									 y: yPos,									 z: zPos,									 alpha: 1,									 //_color: _baseColor,									 _Blur_blurX: blur, 									 _Blur_blurY: blur,									 transition: trans,									 onComplete: onPlay,									 onCompleteParams:[ _array ]								 });			}		}				private function onPlay( _array ):void		{			for( var p in _array )			{							// Variables				var xPos:Number = Math.random() * ( _depth * 2 );				var yPos:Number = Math.random() * ( _depth * -1 );				var zPos:Number = Math.random() * ( _depth * 1 );				var blur:Number = ( (( zPos * 2 ) *.5) * .01 );				var size:Number = ( blur * .2 );				var time:Number = Math.random() * ( t * 5 );				var delay:Number = Math.random() * ( del );									// Tweener				Tweener.addTween( _array[p],								 {									 time: time,									 delay: del,									 scaleX: size,									 scaleY: size,									 x: xPos,									 y: yPos,									 z: zPos,									 alpha: 1,									 _Blur_blurX: blur, 									 _Blur_blurY: blur,									 transition: trans,									 onComplete: repetition, // Send it to repetition									 onCompleteParams:[ _array ] // Passes the _array with the onComplete Function								 }); // End of the Tween			} // --- End of the For Loop		} // -- End of the onPlay Function					// ---------- Repetition Function -----------		private function repetition( _array ):void		{			for( var p in _array )			{					// Variables				var xPos:Number = Math.random() * ( _depth * -2 );				var yPos:Number = Math.random() * ( _depth * 1 );				var zPos:Number = Math.random() * ( _depth * -1 );				var blur:Number = ( (( zPos * -2 ) *.5) * .01 );				var size:Number = ( blur * .2 );				var time:Number = Math.random() * ( t * 5 );				var delay:Number = Math.random() * ( del );									// Tweener				Tweener.addTween( _array[p],								{									time: time,									delay: del,									scaleX: size,									scaleY: size,									x: xPos,									y: yPos,									z: zPos,									alpha: 1,									_Blur_blurX: blur, 									_Blur_blurY: blur,									transition: trans,									onComplete: onPlay, // Send it to repetition									onCompleteParams:[ _array ] // Passes the _array with the onComplete Function								});			} // --- End of For Loop		} // --- End of the Repetition Function*/					// ---------- Button Enabled Function -----------		private function ButtonEnabled( _array ):void		{			for( var p in _array )			{				_array[p].buttonMode = true;				_array[p].mouseEnabled = true;			}		}					// ---------- Button Unabled Function -----------		private function ButtonUnabled( _array ):void		{			for( var p in _array )			{					_array[p].buttonMode = false;					_array[p].mouseEnabled = false;			}		}										// ====================================== Public Functions ====================================== //			/* ------------------------------------------------------------------------------------------								This will bring the clicked object to Front and center and blur out other objects				****** To Use ******				(Particle System Name).frontCenter( CurrentTarget, HighlightColor, DarkColor, Blur, darkenBackground:( True/False ) );							   ------------------------------------------------------------------------------------------ */		public function frontCenter( _MC:*, c:uint, dC:uint, b:Number, t:Boolean ):void		{				// background Objects			for( var p in _array )			{				if ( _array[p] != _MC )				{						// Darken BG and Blur                	Tweener.addTween( _array[i],									 {										 _color: dC,										 _Blur_blurX: b, 										 _Blur_blurY: b,										 alpha: .5,										 transition: "linear"									 });				} else				{									// Add Color					Tweener.addTween( _MC,									 {										 time: 2,										 delay: 1,										 scaleX: ( size * 2 ),										 scaleY: ( size * 2 ),										 x: 0,										 y: 0,										 z: 600,										 _color: c,										 _Blur_blurX: 0, 										 _Blur_blurY: 0,										 transition: "easeIn"									  });				} // --- End If/Else 			} // --- End For Loop		} // --- End Front Center Function								/* ------------------------------------------------------------------------------------------								Blur out other objects and Darken Background				****** To Use ******				(Particle System Name).darkenBack( DarkerColor, Blur );							   ------------------------------------------------------------------------------------------ */		public function darkenBack( c:uint, b:Number ):void		{				// Darken background			for( var p in _array )			{				Tweener.addTween( _array[p],								 {									 _color: c,								 	 _Blur_blurX: b, 								 	 _Blur_blurY: b,									 transition: "linear"								 });			} // End For Loop		} // --- End the Darken Background	} // --- End of the Space Class} // --- End of the package